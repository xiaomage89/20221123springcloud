package main.com.thread;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
/**
 * 线程池
 * @author majj
 *
 */
public class ThreadExecutor {

	
	public static void main(String[] args) {
		
			ExecutorService threadPool = Executors.newFixedThreadPool(10);
			ExecutorService threadPool2 = Executors.newCachedThreadPool();
			ExecutorService threadPool3 = Executors.newSingleThreadExecutor();
			
			for (int i = 0; i < 100; i++) {
				threadPool3.execute(new Mytack(i));
			}
			
			//自定义线程
			ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(0, 
					Integer.MAX_VALUE, //非核心 占用cup
                    60L, TimeUnit.SECONDS,
                    new SynchronousQueue<Runnable>());//线程无线 占用内存
			
			
			
			
	}
	
}
	
	class Mytack implements  Runnable {

		@Override
		public void run() {
			// TODO Auto-generated method stub
			System.out.println(Thread.currentThread().getName()+ "--"+ i );
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		int i = 0;
		public Mytack(int i) {
			this.i=i;
		}
		
}
